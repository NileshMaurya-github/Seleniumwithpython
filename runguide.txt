================================================================================
                    DEMOQA SELENIUM AUTOMATION PROJECT - RUN GUIDE
================================================================================

This guide explains how to run the DemoQA Selenium automation tests in various 
configurations and scenarios.

================================================================================
üìã TABLE OF CONTENTS
================================================================================

1. Prerequisites & Setup
2. Running All Tests (Master Runner)
3. Running Individual Test Sections
4. Running Specific Test Types
5. Browser Configuration
6. Headless vs Headed Mode
7. Individual Test Execution
8. Allure Test Execution
9. Troubleshooting
10. Test Reports & Results
11. Advanced Usage Examples

================================================================================
üîß 1. PREREQUISITES & SETUP
================================================================================

Before running tests, ensure you have:

‚úÖ Python 3.8+ installed
‚úÖ Chrome browser installed (default)
‚úÖ ChromeDriver in PATH or use WebDriver Manager
‚úÖ Required Python packages installed:
   pip install selenium webdriver-manager requests

Optional browsers:
‚úÖ Firefox + GeckoDriver (for Firefox testing)
‚úÖ Edge + EdgeDriver (for Edge testing)

Project Structure:
Selenium/
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ elements/          # Element interaction tests
‚îÇ   ‚îú‚îÄ‚îÄ forms/             # Form handling tests
‚îÇ   ‚îú‚îÄ‚îÄ alerts_frames/     # Alerts & frames tests
‚îÇ   ‚îú‚îÄ‚îÄ widgets/           # Widget interaction tests
‚îÇ   ‚îú‚îÄ‚îÄ interactions/      # Drag & drop, sortable tests
‚îÇ   ‚îî‚îÄ‚îÄ bookstore/         # Bookstore application tests
‚îú‚îÄ‚îÄ reports/               # Test reports and summaries
‚îú‚îÄ‚îÄ run_all_project_tests.py  # Master test runner
‚îî‚îÄ‚îÄ runguide.txt          # This guide

================================================================================
üöÄ 2. RUNNING ALL TESTS (MASTER RUNNER)
================================================================================

The master test runner executes all tests across all sections:

Basic Usage:
-----------
python run_all_project_tests.py

This will run:
- All individual tests for each section
- All Allure tests for each section
- Generate comprehensive summary report

Advanced Options:
----------------
python run_all_project_tests.py --browser chrome --headless
python run_all_project_tests.py --individual-only
python run_all_project_tests.py --allure-only
python run_all_project_tests.py --section elements
python run_all_project_tests.py --verbose --generate-report

================================================================================
üéØ 3. RUNNING INDIVIDUAL TEST SECTIONS
================================================================================

Each section has its own test runner for focused testing:

Elements Tests:
--------------
python tests/elements/individual/run_all_individual_tests.py
python tests/elements/test_elements_allure.py

Forms Tests:
-----------
python tests/forms/individual/run_all_individual_tests.py
python tests/forms/test_forms_allure.py

Alerts & Frames Tests:
---------------------
python tests/alerts_frames/individual/run_all_individual_tests.py
python tests/alerts_frames/test_alerts_frames_allure.py

Widgets Tests:
-------------
python tests/widgets/individual/run_all_individual_tests.py
python tests/widgets/test_widgets_allure.py

Interactions Tests:
------------------
python tests/interactions/individual/run_all_individual_tests.py
python tests/interactions/test_interactions_allure.py

Bookstore Tests:
---------------
python tests/bookstore/individual/run_all_individual_tests.py
python tests/bookstore/test_bookstore_allure.py

================================================================================
üîç 4. RUNNING SPECIFIC TEST TYPES
================================================================================

Individual Tests Only:
---------------------
python run_all_project_tests.py --individual-only

This runs only the individual test suites, skipping Allure tests.
Individual tests provide detailed step-by-step validation.

Allure Tests Only:
-----------------
python run_all_project_tests.py --allure-only

This runs only the Allure-compatible tests for reporting.
Allure tests are optimized for test reporting and CI/CD.

Specific Section Only:
---------------------
python run_all_project_tests.py --section elements
python run_all_project_tests.py --section bookstore
python run_all_project_tests.py --section interactions

Available sections: elements, forms, alerts_frames, widgets, interactions, bookstore

================================================================================
üåê 5. BROWSER CONFIGURATION
================================================================================

Chrome (Default):
----------------
python run_all_project_tests.py --browser chrome
python tests/elements/individual/run_all_individual_tests.py

Firefox:
-------
python run_all_project_tests.py --browser firefox
# Note: Requires Firefox and GeckoDriver installed

Edge:
----
python run_all_project_tests.py --browser edge
# Note: Requires Edge and EdgeDriver installed

Browser-Specific Examples:
-------------------------
# Run bookstore tests in Firefox
python run_all_project_tests.py --section bookstore --browser firefox

# Run all tests in Edge headless mode
python run_all_project_tests.py --browser edge --headless

================================================================================
üëª 6. HEADLESS VS HEADED MODE
================================================================================

Headed Mode (Default):
---------------------
python run_all_project_tests.py

- Browser window is visible
- Good for debugging and development
- Slower execution
- Can see test interactions in real-time

Headless Mode:
-------------
python run_all_project_tests.py --headless

- No browser window (runs in background)
- Faster execution
- Good for CI/CD pipelines
- Less resource intensive
- Cannot visually debug issues

Examples:
--------
# Run elements tests in headless mode
python tests/elements/individual/run_all_individual_tests.py --headless

# Run all tests headless with verbose output
python run_all_project_tests.py --headless --verbose

================================================================================
üî¨ 7. INDIVIDUAL TEST EXECUTION
================================================================================

Individual tests provide detailed step-by-step validation:

Run All Individual Tests:
------------------------
python run_all_project_tests.py --individual-only

Run Section Individual Tests:
----------------------------
python tests/elements/individual/run_all_individual_tests.py
python tests/forms/individual/run_all_individual_tests.py
python tests/alerts_frames/individual/run_all_individual_tests.py
python tests/widgets/individual/run_all_individual_tests.py
python tests/interactions/individual/run_all_individual_tests.py
python tests/bookstore/individual/run_all_individual_tests.py

Run Specific Individual Tests:
-----------------------------
python tests/elements/individual/test_text_box_individual.py
python tests/forms/individual/test_practice_form_individual.py
python tests/bookstore/individual/test_login_individual.py
python tests/interactions/individual/test_dragabble_individual.py

Individual Test Features:
------------------------
‚úÖ Detailed step-by-step logging
‚úÖ Comprehensive error handling
‚úÖ Ad-blocking for reliable execution
‚úÖ Multiple fallback strategies
‚úÖ Real-time progress indicators
‚úÖ Detailed test summaries

================================================================================
üéØ 8. ALLURE TEST EXECUTION
================================================================================

Allure tests are optimized for test reporting:

Run All Allure Tests:
--------------------
python run_all_project_tests.py --allure-only

Run Section Allure Tests:
------------------------
python tests/elements/test_elements_allure.py
python tests/forms/test_forms_allure.py
python tests/alerts_frames/test_alerts_frames_allure.py
python tests/widgets/test_widgets_allure.py
python tests/interactions/test_interactions_allure.py
python tests/bookstore/test_bookstore_allure.py

Generate Allure Reports:
-----------------------
# Install Allure (if not already installed)
# Download from: https://docs.qameta.io/allure/#_installing_a_commandline

# Run tests with Allure
python run_allure_tests.py

# Generate and serve Allure report
allure generate allure-results --clean -o allure-report
allure serve allure-results

Allure Test Features:
--------------------
‚úÖ Rich HTML reports
‚úÖ Test categorization
‚úÖ Screenshots on failure
‚úÖ Test execution timeline
‚úÖ Trend analysis
‚úÖ CI/CD integration ready

================================================================================
üîß 9. TROUBLESHOOTING
================================================================================

Common Issues & Solutions:

Issue: "ChromeDriver not found"
Solution: 
- Install webdriver-manager: pip install webdriver-manager
- Or download ChromeDriver and add to PATH

Issue: "Element not clickable" or "Ad overlay" errors
Solution:
- Tests include ad-blocking mechanisms
- Use --headless mode for more stable execution
- Ensure stable internet connection

Issue: "Timeout" errors
Solution:
- Increase timeout in test configuration
- Check internet connection
- Run tests during off-peak hours

Issue: Tests fail intermittently
Solution:
- Run in headless mode: --headless
- Use individual tests for better reliability
- Check system resources (CPU, memory)

Issue: "Module not found" errors
Solution:
- Install requirements: pip install -r requirements.txt
- Ensure Python path is correct
- Use virtual environment

Debug Mode:
----------
python run_all_project_tests.py --verbose
python tests/elements/individual/run_all_individual_tests.py --debug

Check Test Status:
-----------------
# View recent test results
cat reports/master_test_results.json
cat tests/elements/individual/individual_tests_summary.txt

================================================================================
üìä 10. TEST REPORTS & RESULTS
================================================================================

Test results are saved in multiple formats:

Master Test Results:
-------------------
reports/master_test_results.json    # Complete test execution data
reports/final_project_report.md     # Human-readable summary

Individual Test Results:
-----------------------
tests/elements/individual/individual_tests_summary.txt
tests/forms/individual/individual_tests_summary.txt
tests/alerts_frames/individual/individual_tests_summary.txt
tests/widgets/individual/individual_tests_summary.txt
tests/interactions/individual/individual_tests_summary.txt
tests/bookstore/individual/individual_tests_summary.txt

Allure Reports:
--------------
allure-results/                      # Raw Allure data
allure-report/                       # Generated HTML reports
reports/allure_summary_report.html   # Allure summary

Fix Summaries:
-------------
reports/bookstore_test_fixes_summary.md
reports/interactions_test_fixes_summary.md
reports/forms_test_fix_summary.md

View Results:
------------
# View master results
python -m json.tool reports/master_test_results.json

# View section summaries
cat tests/*/individual/individual_tests_summary.txt

================================================================================
üöÄ 11. ADVANCED USAGE EXAMPLES
================================================================================

Development & Debugging:
-----------------------
# Run single section with verbose output
python run_all_project_tests.py --section elements --verbose

# Debug specific test type
python tests/bookstore/individual/test_login_individual.py

# Run in headed mode for visual debugging
python tests/interactions/individual/test_dragabble_individual.py

CI/CD Pipeline:
--------------
# Fast headless execution for CI
python run_all_project_tests.py --headless --generate-report

# Run critical tests only
python run_all_project_tests.py --section bookstore --headless

# Generate Allure reports for CI
python run_allure_tests.py
allure generate allure-results --clean -o allure-report

Performance Testing:
-------------------
# Time test execution
time python run_all_project_tests.py --headless

# Run subset for quick validation
python run_all_project_tests.py --individual-only --section elements

Cross-Browser Testing:
---------------------
# Test in multiple browsers
python run_all_project_tests.py --browser chrome --section bookstore
python run_all_project_tests.py --browser firefox --section bookstore
python run_all_project_tests.py --browser edge --section bookstore

Regression Testing:
------------------
# Full regression suite
python run_all_project_tests.py --verbose --generate-report

# Quick smoke tests
python run_all_project_tests.py --individual-only --headless

Custom Test Combinations:
-------------------------
# Elements and Forms only
python run_all_project_tests.py --section elements
python run_all_project_tests.py --section forms

# All interactions in Firefox headless
python run_all_project_tests.py --section interactions --browser firefox --headless

================================================================================
üìû SUPPORT & DOCUMENTATION
================================================================================

For additional help:

üìÅ Project Documentation:
- docs/comprehensive_test_execution_guide.md
- docs/troubleshooting_guide.md
- docs/cross_browser_testing_guide.md

üìä Test Reports:
- reports/ directory contains all test results
- PROJECT_COMPLETION_SUMMARY.md for project overview

üîß Configuration Files:
- requirements.txt - Python dependencies
- setup.py - Project setup
- .github/workflows/selenium-tests.yml - CI/CD configuration

================================================================================
‚úÖ QUICK REFERENCE COMMANDS
================================================================================

# Run everything (recommended for full testing)
python run_all_project_tests.py

# Quick smoke test (fastest)
python run_all_project_tests.py --individual-only --headless

# Debug specific section
python run_all_project_tests.py --section bookstore --verbose

# CI/CD mode
python run_all_project_tests.py --headless --generate-report

# Cross-browser testing
python run_all_project_tests.py --browser firefox --section interactions

# Individual test debugging
python tests/elements/individual/test_text_box_individual.py

# Generate Allure reports
python run_allure_tests.py
allure serve allure-results

================================================================================
üéâ HAPPY TESTING!
================================================================================

This comprehensive test suite covers all aspects of the DemoQA website with
robust error handling, ad-blocking, and multiple execution modes.

For questions or issues, refer to the troubleshooting section or check the
project documentation in the docs/ directory.